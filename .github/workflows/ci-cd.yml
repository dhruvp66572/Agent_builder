name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: agentbuilder/backend
  FRONTEND_IMAGE_NAME: agentbuilder/frontend

jobs:
  # Backend CI/CD Job
  backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: agent_builder_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      run: |
        cd backend
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/agent_builder_test"
        export ENVIRONMENT="test"
        export SECRET_KEY="test-secret-key"
        export OPENAI_API_KEY="test-key"
        export GOOGLE_API_KEY="test-key" 
        export SERPAPI_KEY="test-key"

    - name: Run database migrations
      run: |
        cd backend
        export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/agent_builder_test"
        python -m alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/agent_builder_test

    - name: Run tests
      run: |
        cd backend
        pytest tests/ -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/agent_builder_test
        ENVIRONMENT: test
        SECRET_KEY: test-secret-key
        OPENAI_API_KEY: test-key
        GOOGLE_API_KEY: test-key
        SERPAPI_KEY: test-key

    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push backend Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest

  # Frontend CI/CD Job
  frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linting
      run: |
        cd frontend
        npm run lint

    - name: Run tests
      run: |
        cd frontend
        npm run test

    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'http://localhost:8000' }}

    - name: Build frontend Docker image
      run: |
        cd frontend
        docker build -t ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push frontend Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest

  # Deploy to Digital Ocean
  deploy:
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DIGITALOCEAN_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DIGITALOCEAN_SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to Digital Ocean Droplet
      run: |
        ssh -o StrictHostKeyChecking=no root@${{ secrets.DIGITALOCEAN_SERVER_IP }} '
          cd /opt/agent-builder
          
          # Pull latest images
          docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          docker pull ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
          
          # Update docker-compose with new images
          docker-compose down
          docker-compose pull
          docker-compose up -d
          
          # Run database migrations
          docker-compose exec -T backend python -m alembic upgrade head
          
          # Clean up old images
          docker image prune -af
        '

    - name: Health check
      run: |
        sleep 30
        curl -f http://${{ secrets.DIGITALOCEAN_SERVER_IP }}/health || exit 1